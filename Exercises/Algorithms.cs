namespace Exercises;

public static class Algorithms
{
    public static int MakeAnagram(string a, string b)
    {
        /*
         * A student is taking a cryptography class and has found anagrams to be very useful.
         * Two strings are anagrams of each other if the first string's letters can be rearranged to form the second string.
         * In other words, both strings must contain the same exact letters in the same exact frequency.
         * For example, bacdc and dcbac are anagrams, but bacdc and dcbad are not.
         *
         * The student decides on an encryption scheme that involves two large strings.
         * The encryption is dependent on the minimum number of character deletions required to make the two strings anagrams.
         * Determine this number.
         * Given two strings,  and , that may or may not be of the same length, determine the minimum number of character deletions required to make  and  anagrams.
         * Any characters can be deleted from either of the strings.
         */

        var arr = new int[26];

        var s1 = a.ToCharArray();
        var s2 = b.ToCharArray();

        foreach (var l in s1)
        {
            arr[l - 'a'] += 1;
        }

        foreach (var l in s2)
        {
            arr[l - 'a'] -= 1;
        }

        return arr.Sum(Math.Abs);
    }

    public static char FindTheDifference(string s, string t)
    {
        /*
         * Given 2 strings s and t, string t is generated by random shuffling string s and then adding one more letter
         * at a random position. Return the letter that was added to t.
         *
         * For example,
         *
         * Input: s = "abc", t = "acba"
         * Output: "a"
         *
         * Input: s = "", t = "a"
         * Output: "a"
         *
         */

        var count = 0;

        for (var i = 0; i < s.Length; i++)
        {
            count -= s[i];

            count += t[i];
        }

        // Because t is longer than s by 1 character, we need to sum the last character
        // t[^1] is the same as t[t.Length - 1]
        // See C# 8 ranges operators here https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges 
        count += t[^1];

        // The final count should be equals to the letter in ASCII code
        return (char)count;
    }
}